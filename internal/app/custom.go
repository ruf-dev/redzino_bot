// Code generated by RedSock CLI.
// DO EDIT, DON'T DELETE THIS FILE.

package app

import (
	"context"

	errors "go.redsock.ru/rerrors"
	"golang.org/x/sync/errgroup"

	"github.com/ruf-dev/redzino_bot/internal/cron"
	"github.com/ruf-dev/redzino_bot/internal/service"
	"github.com/ruf-dev/redzino_bot/internal/service/servicev1"
	"github.com/ruf-dev/redzino_bot/internal/storage"
	"github.com/ruf-dev/redzino_bot/internal/storage/db"
	"github.com/ruf-dev/redzino_bot/internal/storage/tx_manager"
	"github.com/ruf-dev/redzino_bot/internal/transport/telegram"
)

type Custom struct {
	db  storage.Data
	srv service.Service

	messageSenderCron cron.MessageSenderCron

	tg *telegram.Server
}

func (c *Custom) Init(a *App) error {
	c.db = db.NewProvider(a.Postgres)

	txManager := tx_manager.New(a.Postgres)

	c.srv = servicev1.NewService(c.db, txManager)

	c.messageSenderCron = cron.NewMessageSender(c.db, a.Telegram)

	c.tg = telegram.NewServer(a.Cfg, a.Telegram, c.srv)
	return nil
}

// Start - launch custom handlers
// Even if you won't use it keep it for proper work
func (c *Custom) Start(ctx context.Context) error {
	eg, ctx := errgroup.WithContext(ctx)
	eg.Go(func() error {
		return c.tg.Start(ctx)
	})

	eg.Go(func() error {
		c.messageSenderCron.Start(ctx)
		return nil
	})

	err := eg.Wait()
	if err != nil {
		return errors.Wrap(err)
	}

	return nil
}

// Stop - gracefully stop custom handlers
// Even if you won't use it keep it for proper work
func (c *Custom) Stop() error {

	eg := errgroup.Group{}
	eg.Go(func() error {
		return c.tg.Stop(nil)
	})

	err := eg.Wait()
	if err != nil {
		return errors.Wrap(err)
	}

	return nil
}
